//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Scripts/Input/InputMapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMapping : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMapping"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0ee6b77f-5376-4924-9b15-d057ba2c2f08"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0768c588-df40-43c8-b2d7-b9e4aa794a8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca59182a-84be-48e6-88c6-40087ba1a886"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldMap"",
            ""id"": ""086596a1-635e-4cda-90dc-03bd70657bb1"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""55d3d220-6f69-4112-b3c0-da009de04e43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""f4de7cd8-6703-4cad-95cc-ed96acbf5a54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""30a6cdaf-ea7a-4d5a-9b5b-2a4b652a814b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""17fa21b4-87cf-4801-8d78-e44a5cc041fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7609d7f-7493-48a3-b191-26ca5a288768"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4736d1ee-4528-4e68-a34e-b64a1526cec2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84ee6db-9d15-4907-b70c-d590558d31a4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a123c80-0894-47eb-ba6c-ad043103cced"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0968e65-f806-4a8c-b50d-d398f79e07f1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7eb08fa-4344-4c20-a7a3-0721f6943445"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce07bc90-0511-4b4c-9cee-3e297cb31796"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83ade1cb-125b-4335-87a7-d70fe62ac51e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Newaction = m_Player.FindAction("New action", throwIfNotFound: true);
        // WorldMap
        m_WorldMap = asset.FindActionMap("WorldMap", throwIfNotFound: true);
        m_WorldMap_Up = m_WorldMap.FindAction("Up", throwIfNotFound: true);
        m_WorldMap_Down = m_WorldMap.FindAction("Down", throwIfNotFound: true);
        m_WorldMap_Left = m_WorldMap.FindAction("Left", throwIfNotFound: true);
        m_WorldMap_Right = m_WorldMap.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Newaction;
    public struct PlayerActions
    {
        private @InputMapping m_Wrapper;
        public PlayerActions(@InputMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Player_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // WorldMap
    private readonly InputActionMap m_WorldMap;
    private IWorldMapActions m_WorldMapActionsCallbackInterface;
    private readonly InputAction m_WorldMap_Up;
    private readonly InputAction m_WorldMap_Down;
    private readonly InputAction m_WorldMap_Left;
    private readonly InputAction m_WorldMap_Right;
    public struct WorldMapActions
    {
        private @InputMapping m_Wrapper;
        public WorldMapActions(@InputMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_WorldMap_Up;
        public InputAction @Down => m_Wrapper.m_WorldMap_Down;
        public InputAction @Left => m_Wrapper.m_WorldMap_Left;
        public InputAction @Right => m_Wrapper.m_WorldMap_Right;
        public InputActionMap Get() { return m_Wrapper.m_WorldMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldMapActions set) { return set.Get(); }
        public void SetCallbacks(IWorldMapActions instance)
        {
            if (m_Wrapper.m_WorldMapActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_WorldMapActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_WorldMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public WorldMapActions @WorldMap => new WorldMapActions(this);
    public interface IPlayerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IWorldMapActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
